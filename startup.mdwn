[[!meta title="Overview about the various webc-specific scripts and what gets called when"]]

# Systemd's [/lib/systemd/system/webc.service](https://github.com/Webconverger/webc/blob/master/lib/systemd/system/webc.service) &rarr; [/etc/webc/live-config.sh](https://github.com/Webconverger/webc/blob/master/etc/webc/live-config.sh)


[/etc/webc/live-config.sh](https://github.com/Webconverger/webc/blob/master/etc/webc/live-config.sh) calls [/etc/webc/wireless](https://github.com/Webconverger/webc/blob/master/etc/webc/wireless) which sets up **wireless** networking configuration and **proxy** configuration. Basically things that need to be preset before networking is activated.

Once the network is setup, on a Debian system **/etc/network/if-up.d** is run,
however in many cases in our experience only the interface is up and not the
network neccessarily.

Therefore we have:

[/etc/network/if-up.d/after-network-up](https://github.com/Webconverger/webc/blob/master/etc/network/if-up.d/after-network-up)

Which executes scripts in [/etc/webc/network-up.d](https://github.com/Webconverger/webc/tree/master/etc/webc/network-up.d)

**live-config.sh dependencies on other Webconverger scripts:** [webc-id](https://github.com/Webconverger/webc/blob/master/etc/webc/network-up.d/webc-id) which is run from [.xinitrc's webc.sh](https://github.com/Webconverger/webc/blob/master/home/webc/webc.sh)

* live-config.sh contains logic that needs to be run as root.
* webc.sh is the place where things can be run as the user.

# [/home/webc/.xinitrc](https://github.com/Webconverger/webc/tree/master/home/webc/.xinitrc) &rarr; [webc.sh](https://github.com/Webconverger/webc/blob/master/home/webc/webc.sh)

**Dependencies on other Webconverger scripts:** Waits for `/etc/webc/id` from [webc-id](https://github.com/Webconverger/webc/blob/master/etc/webc/network-up.d/webc-id)

These are items that can run as the **webc** user

Logged in `/home/webc/.xerrors`

Note that only the bottom loop runs between browser sessions. For settings to
take effect, it's best to reboot the machine.

# Boot order

* webc.sh blocks on network image
* Network setup
* webc-id has an id
* webc.sh blocks on config image, echos read into \$live_config_pipe
* live-config.sh
* updates (todo this needs to be triggered from live-config)
* webc.sh launches browser loop

# Debugging

Append `debug` on cmdline and view `/var/log/syslog`. You can export logs using the `log=` [[API|boot]]
